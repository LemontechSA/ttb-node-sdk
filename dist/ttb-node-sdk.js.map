{"version":3,"file":"ttb-node-sdk.js","sources":["../src/v2/Constants.js","../src/v2/Session.js","../src/v2/NeedsAuthentication.js","../src/v2/Clients.js","../src/v2/Projects.js","../src/v2/TimeEntries.js","../src/v2/V2.js","../src/TimeBilling.js"],"sourcesContent":["export default {\n  baseUrl: (subdomain) => (\n    `https://${subdomain}.thetimebilling.com/time_tracking/api/v2`\n  )\n}","import Axios from 'axios'\nimport _ from 'lodash'\n\nimport Constants from './Constants'\n\nexport default class Session {\n  static login(subdomain, params) {\n    const requiredParams = ['user', 'password', 'app_key']\n\n    if (!this.validateParams(params, requiredParams)) {\n      throw new Error(this.parameterException(params, requiredParams))\n    }\n\n    return Axios.post(`${Constants.baseUrl(subdomain)}/login`, {\n      user: params.user,\n      password: params.password,\n      app_key: params.app_key\n    })\n    .then(response => response.data)\n  }\n\n  static validateParams(params, requiredParams) {\n    return _.intersection(\n      _.keys(params),\n      requiredParams\n    ).length === requiredParams.length\n  }\n\n  static parameterException(params, requiredParams) {\n    return `Required parameters missing, required are ${requiredParams} but found only ${_.keys(params)}`\n  }\n}","import Axios from 'axios'\n\nimport Constants from './Constants'\n\nexport default class NeedsAuthentication {\n  constructor(subdomain, authToken) {\n    this.authToken = authToken\n    this.subdomain = subdomain\n  }\n\n  apiClient() {\n    return Axios.create({\n      baseURL: `${Constants.baseUrl(this.subdomain)}`,\n      headers: {\n        common: {\n          AUTHTOKEN: this.authToken\n        }\n      }\n    })\n  }\n}","import NeedsAuthentication from './NeedsAuthentication'\n\nexport default class Clients extends NeedsAuthentication{\n  all(params = {}) {\n    return this.apiClient().get('/clients', params)\n      .then(response => response.data)\n  }\n}","import NeedsAuthentication from './NeedsAuthentication'\n\nexport default class Projects extends NeedsAuthentication{\n  all(params = {}) {\n    return this.apiClient().get('/projects', params)\n      .then(response => response.data)\n  }\n}","import NeedsAuthentication from './NeedsAuthentication'\n\nexport default class TimeEntries extends NeedsAuthentication {\n  constructor(subdomain, authToken, userId) {\n    super(subdomain, authToken)\n    this.userId = userId\n  }\n\n  baseEndpoint() {\n    return `users/${this.userId}/time_entries`\n  }\n\n  all(params = {}) {\n    return this.apiClient().get(this.baseEndpoint(), params)\n      .then(response => response.data)\n  }\n}","import _ from 'lodash'\n\nimport Session from './Session'\nimport Clients from './Clients'\nimport Projects from './Projects'\nimport TimeEntries from './TimeEntries'\n\nexport default class V2 {\n  constructor(subdomain) {\n    this.subdomain = subdomain\n    this.authToken = null\n    this.userId = null\n  }\n\n  login(user, password, appKey) {\n    return Session.login(this.subdomain, {\n      user, password, app_key: appKey\n    }).then(data => {\n      this.authToken = data.auth_token\n      this.userId = data.user_id\n      return data\n    })\n  }\n\n  clients() {\n    if (_.isEmpty(this.authToken)) {\n      throw new Error('Undefined authToken. Please login')\n    }\n\n    return new Clients(this.subdomain, this.authToken)\n  }\n\n  projects() {\n    if (_.isEmpty(this.authToken)) {\n      throw new Error('Undefined authToken. Please login')\n    }\n\n    return new Projects(this.subdomain, this.authToken)\n  }\n\n  timeEntries() {\n    if (_.isEmpty(this.authToken)) {\n      throw new Error('Undefined authToken. Please login')\n    }\n\n    if (_.isEmpty(this.userId)) {\n      throw new Error('Undefined user. Please login')\n    }\n\n    return new TimeEntries(this.subdomain, this.authToken, this.userId)\n  }\n}","import V2 from './v2/V2'\n\nexport default {\n  V2: (subdomain) => new V2(subdomain)\n}"],"names":["baseUrl","subdomain","Session","params","requiredParams","this","validateParams","Error","parameterException","Axios","post","Constants","user","password","app_key","then","response","data","_","intersection","keys","length","NeedsAuthentication","authToken","create","baseURL","headers","common","AUTHTOKEN","Clients","apiClient","get","Projects","TimeEntries","userId","baseEndpoint","V2","appKey","login","_this","auth_token","user_id","isEmpty"],"mappings":"+0CAAA,cAAe,CACbA,QAAS,SAACC,2BACGA,gDCGMC,gHACND,EAAWE,OAChBC,EAAiB,CAAC,OAAQ,WAAY,eAEvCC,KAAKC,eAAeH,EAAQC,SACzB,IAAIG,MAAMF,KAAKG,mBAAmBL,EAAQC,WAG3CK,MAAMC,eAAQC,UAAUX,QAAQC,aAAoB,CACzDW,KAAMT,EAAOS,KACbC,SAAUV,EAAOU,SACjBC,QAASX,EAAOW,UAEjBC,KAAK,SAAAC,UAAYA,EAASC,8CAGPd,EAAQC,UACrBc,EAAEC,aACPD,EAAEE,KAAKjB,GACPC,GACAiB,SAAWjB,EAAeiB,kDAGJlB,EAAQC,6DACoBA,6BAAiCc,EAAEE,KAAKjB,aCzB3EmB,0CACPrB,EAAWsB,gCAChBA,UAAYA,OACZtB,UAAYA,kEAIVQ,MAAMe,OAAO,CAClBC,kBAAYd,UAAUX,QAAQK,KAAKJ,YACnCyB,QAAS,CACPC,OAAQ,CACNC,UAAWvB,KAAKkB,uBCbLM,6JAAgBP,qEAC/BnB,yDAAS,UACJE,KAAKyB,YAAYC,IAAI,WAAY5B,GACrCY,KAAK,SAAAC,UAAYA,EAASC,gBCHZe,8JAAiBV,qEAChCnB,yDAAS,UACJE,KAAKyB,YAAYC,IAAI,YAAa5B,GACtCY,KAAK,SAAAC,UAAYA,EAASC,gBCHZgB,mCACPhC,EAAWsB,EAAWW,wGAC1BjC,EAAWsB,KACZW,OAASA,uBAHuBZ,gGAOrBjB,KAAK6B,0DAGnB/B,yDAAS,UACJE,KAAKyB,YAAYC,IAAI1B,KAAK8B,eAAgBhC,GAC9CY,KAAK,SAAAC,UAAYA,EAASC,gBCPZmB,yBACPnC,gCACLA,UAAYA,OACZsB,UAAY,UACZW,OAAS,wDAGVtB,EAAMC,EAAUwB,qBACbnC,QAAQoC,MAAMjC,KAAKJ,UAAW,CACnCW,KAAAA,EAAMC,SAAAA,EAAUC,QAASuB,IACxBtB,KAAK,SAAAE,UACNsB,EAAKhB,UAAYN,EAAKuB,WACtBD,EAAKL,OAASjB,EAAKwB,QACZxB,yCAKLC,EAAEwB,QAAQrC,KAAKkB,iBACX,IAAIhB,MAAM,4CAGX,IAAIsB,QAAQxB,KAAKJ,UAAWI,KAAKkB,iDAIpCL,EAAEwB,QAAQrC,KAAKkB,iBACX,IAAIhB,MAAM,4CAGX,IAAIyB,SAAS3B,KAAKJ,UAAWI,KAAKkB,oDAIrCL,EAAEwB,QAAQrC,KAAKkB,iBACX,IAAIhB,MAAM,wCAGdW,EAAEwB,QAAQrC,KAAK6B,cACX,IAAI3B,MAAM,uCAGX,IAAI0B,YAAY5B,KAAKJ,UAAWI,KAAKkB,UAAWlB,KAAK6B,6BC/CjD,CACbE,GAAI,SAACnC,UAAc,IAAImC,GAAGnC"}